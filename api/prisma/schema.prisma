// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String?
  googleId  String? @unique
  name      String?
  savedCourses Course[] @relation("userCoursesSaved")
  userCourses UserCourse[]
  primaryMajor Program? @relation("primaryMajor", fields: [primaryMajorId], references: [id])
  primaryMajorId Int?
}

model UserCourse {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  course     Course  @relation(fields: [courseId], references: [id])
  courseId   Int
  semester   Int

  @@unique([userId, courseId], name: "userId_courseId")

}

model Program {
  id                 Int                 @id @default(autoincrement())
  title              String
  requirements       Requirement[]
  courseRequirements    CourseRequirement?  @relation(fields: [courseRequirementsId], references: [id])
  courseRequirementsId  Int? @unique
  degree Degree @relation(fields: [degreeId], references: [id])
  degreeId Int
  usersPrimary User[] @relation("primaryMajor")
}

model Degree {
  id                 Int                 @id @default(autoincrement())
  title              String
  requirements       Requirement[]
  courseRequirements    CourseRequirement?  @relation(fields: [courseRequirementsId], references: [id])
  courseRequirementsId  Int?                @unique
  school             School  @relation(fields: [schoolId], references: [id])  
  schoolId           Int
  programs Program[]
}

model School {
  id                    Int                 @id @default(autoincrement())
  title                 String
  requirements          Requirement[]
  courseRequirements    CourseRequirement?  @relation(fields: [courseRequirementsId], references: [id])
  courseRequirementsId  Int?                @unique
  degrees               Degree[]     
}

model Requirement {
  id       Int     @id @default(autoincrement())
  passFail Boolean @default(false)
  blocking Boolean @default(false)
  credits  Int
  tag      Tag     @relation(fields: [tagId], references: [id])
  tagId    Int
  program   Program?  @relation(fields: [programId], references: [id])
  programId Int?
  degree   Degree?  @relation(fields: [degreeId], references: [id])
  degreeId Int?
  school   School?  @relation(fields: [schoolId], references: [id])
  schoolId Int?
}

model Tag {
  id           Int           @id @default(autoincrement())
  school       String?
  name         String @unique
  requirements Requirement[]
  courses      Course[]
}

model CourseRequirement {
  id        Int      @id @default(autoincrement())
  courses   Course[]   @relation("courseCourseReqs")
  program   Program?  
  programId Int? @unique
  degree    Degree?  
  degreeId  Int? @unique
  school    School?  
  schoolId  Int? @unique
}


model Course {
  id                   Int                 @id @default(autoincrement())
  title                String
  courseCode           String
  credits              Float
  department           String
  departmentCode       String
  departmentId         String
  courseRequirements   CourseRequirement[] @relation("courseCourseReqs")
  attributes           Tag[]
  usersSaving           User[] @relation("userCoursesSaved")
  userCourses           UserCourse[]
  description         String?

  @@unique([departmentId, courseCode], name: "departmentId_courseCode")

}