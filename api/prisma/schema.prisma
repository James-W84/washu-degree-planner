// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  password         String?
  googleId         String?      @unique
  name             String?
  savedCourses     Course[]     @relation("userCoursesSaved")
  userCourses      UserCourse[]
  primaryMajor     Program?     @relation("primaryMajor", fields: [primaryMajorId], references: [id])
  primaryMajorId   Int?
  secondaryMajor   Program?     @relation("secondaryMajor", fields: [secondaryMajorId], references: [id])
  secondaryMajorId Int?
}

model UserCourse {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  semester Int

  @@unique([userId, courseId], name: "userId_courseId")
}

model Program {
  id                  Int                      @id @default(autoincrement())
  title               String
  requirements        GroupRequirement[]
  courseRequirements  CourseRequirementGroup[]
  degree              Degree                   @relation(fields: [degreeId], references: [id])
  degreeId            Int
  primaryMajorUsers   User[]                   @relation("primaryMajor")
  secondaryMajorUsers User[]                   @relation("secondaryMajor")
}

model Degree {
  id                 Int                      @id @default(autoincrement())
  title              String
  requirements       GroupRequirement[]
  courseRequirements CourseRequirementGroup[]
  school             School                   @relation(fields: [schoolId], references: [id])
  schoolId           Int
  programs           Program[]
}

model School {
  id                 Int                      @id @default(autoincrement())
  title              String
  name               String                   @unique
  requirements       GroupRequirement[]
  courseRequirements CourseRequirementGroup[]
  degrees            Degree[]
  departments        Department[]
}

model GroupRequirement {
  id        Int      @id @default(autoincrement())
  name      String
  credits   Int
  tag       Tag?     @relation(fields: [tagId], references: [id])
  tagId     Int?
  courses   Course[]
  program   Program? @relation(fields: [programId], references: [id])
  programId Int?
  degree    Degree?  @relation(fields: [degreeId], references: [id])
  degreeId  Int?
  school    School?  @relation(fields: [schoolId], references: [id])
  schoolId  Int?
}

model Tag {
  id           Int                @id @default(autoincrement())
  school       String?
  name         String             @unique
  requirements GroupRequirement[]
  courses      Course[]
}

enum CourseRequirementGroupType {
  SINGLE
  AND
  OR
}

model CourseRequirementGroup {
  id           Int                        @id @default(autoincrement())
  courses      Course[]                   @relation("courseCourseReqGroups")
  type         CourseRequirementGroupType
  parentGroups CourseRequirementGroup[]   @relation("nestedCourseReqGroups")
  subGroups    CourseRequirementGroup[]   @relation("nestedCourseReqGroups")
  program      Program?                   @relation(fields: [programId], references: [id])
  programId    Int?
  degree       Degree?                    @relation(fields: [degreeId], references: [id])
  degreeId     Int?
  school       School?                    @relation(fields: [schoolId], references: [id])
  schoolId     Int?
}

model Department {
  id       Int      @id @default(autoincrement())
  code     String   @unique
  name     String
  school   School   @relation(fields: [schoolId], references: [id])
  schoolId Int
  courses  Course[]
}

model Course {
  id                Int                      @id @default(autoincrement())
  title             String
  courseCode        String
  credits           Float
  department        Department               @relation(fields: [departmentId], references: [id])
  departmentId      Int
  description       String?
  courseGroups      CourseRequirementGroup[] @relation("courseCourseReqGroups")
  tags              Tag[]
  usersSaving       User[]                   @relation("userCoursesSaved")
  userCourses       UserCourse[]
  groupRequirements GroupRequirement[]

  @@unique([departmentId, courseCode], name: "departmentId_courseCode")
}
